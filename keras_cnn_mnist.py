# -*- coding: utf-8 -*-
"""keras_CNN_mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/shhuangmust/AI/blob/113-1/4.keras_CNN_mnist.ipynb
"""

import numpy as np
from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from keras.datasets import mnist
from keras.utils import to_categorical

# 1. 加載數據集
(train_data, train_label), (test_data, test_label) = mnist.load_data()

# 2. 數據預處理
# 將數據重塑為 28x28x1 的形狀
train_data = train_data.reshape((train_data.shape[0], 28, 28, 1)).astype('float32') / 255
test_data = test_data.reshape((test_data.shape[0], 28, 28, 1)).astype('float32') / 255

# 將標籤轉換為獨熱編碼
train_label = to_categorical(train_label, num_classes=10)
test_label = to_categorical(test_label, num_classes=10)

# 3. 定義模型
model = Sequential()
model.add(Conv2D(filters=16, kernel_size=(5, 5), input_shape=(28, 28, 1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
# 如果需要，可以取消註釋下列兩行
# model.add(Conv2D(filters=36, kernel_size=(5, 5), activation='relu'))
# model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(10, activation='softmax'))

# 4. 編譯模型
model.compile(optimizer='rmsprop', loss='categorical_crossentropy', metrics=['accuracy'])

# 5. 訓練模型
model.fit(train_data, train_label, epochs=20, batch_size=512)

# 6. 評估模型
score = model.evaluate(test_data, test_label)
print("Test accuracy:", score[1])

mnist=keras.datasets.mnist
(train_data, train_label), (test_data, test_label) = mnist.load_data()
test_label_original=test_label #for crosstab
train_label = keras.utils.to_categorical(train_label)
test_label = keras.utils.to_categorical(test_label)

train_history=model.fit(train_data,train_label,epochs=10,batch_size=512)

score=model.evaluate(test_data, test_label)
print(score[1])

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# 1. 繪製訓練歷史圖
def show_train_history(train_history, train, validation):
    plt.plot(train_history.history[train])
    plt.plot(train_history.history[validation])
    plt.title('Train History')
    plt.ylabel(train)
    plt.xlabel('Epoch')
    plt.legend(['train', 'validation'], loc='best')
    plt.show()

# 2. 訓練模型並存儲歷史
train_history = model.fit(train_data, train_label, epochs=20, batch_size=512, validation_split=0.2)

# 3. 繪製正確性與損失歷史圖
show_train_history(train_history, 'accuracy', 'val_accuracy')  # 注意 'val_accuracy' 用於驗證準確率
show_train_history(train_history, 'loss', 'val_loss')          # 注意 'val_loss' 用於驗證損失

# 4. 混淆矩陣
prediction = model.predict(test_data)
prediction_label = np.argmax(prediction, axis=1)
test_label_original = np.argmax(test_label, axis=1)  # 將獨熱編碼轉換為原始標籤

# 5. 計算混淆矩陣
conf_matrix = confusion_matrix(test_label_original, prediction_label)

# 6. 繪製混淆矩陣
disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix, display_labels=np.arange(10))
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

