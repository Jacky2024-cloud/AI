# -*- coding: utf-8 -*-
"""3_keras_mnist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/shhuangmust/AI/blob/113-1/3_keras_mnist.ipynb
"""

from tensorflow import keras
from keras.models import Sequential
from keras.layers import Dense, Flatten

mnist=keras.datasets.mnist
(train_data, train_label), (test_data, test_label) = mnist.load_data()

import numpy as np


train_data = np.random.rand(100, 10)
train_label = np.random.randint(0, 2, 100)
test_data = np.random.rand(20, 10)
test_label = np.random.randint(0, 2, 20)


print(type(train_data))
print(train_data.shape)
print(type(train_label))
print(train_label.shape)
print(type(test_data))
print(test_data.shape)
print(type(test_label))
print(test_label.shape)

import numpy as np


train_data = np.random.rand(100, 10)
train_label = np.random.randint(0, 2, 100)


print("第一筆標籤:", train_label[0])
print("第一筆資料:", train_data[0])

import numpy as np
import matplotlib.pyplot as plt
train_data = np.random.rand(10, 28, 28)


plt.imshow(train_data[0], cmap='binary')
plt.axis('off')
plt.show()

model=Sequential()
model.add(Flatten())
model.add(Dense(32, activation='relu', input_dim=784))
model.add(Dense(10, activation='sigmoid'))
model.compile(optimizer='rmsprop', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

def train_and_evaluate_model(model, train_data, train_label, test_data, test_label, epochs=20, batch_size=512):

    model.fit(train_data, train_label, epochs=epochs, batch_size=batch_size)


    score = model.evaluate(test_data, test_label)


    print("Test accuracy:", score[1])


train_and_evaluate_model(model, train_data, train_label, test_data, test_label)